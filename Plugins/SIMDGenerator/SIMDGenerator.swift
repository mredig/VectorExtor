import Foundation
import PackagePlugin

@main
struct SIMDGenerator: CommandPlugin {
	func performCommand(context: PackagePlugin.PluginContext, arguments: [String]) async throws {
		guard
			let module = context.package.sourceModules.first(where: { $0.moduleName == "VectorExtor"} )
		else { throw CustomError.error(message: "Cannot find module named 'VectorExtor'") }

		guard
			let simd2DoubleSourceFile = module.sourceFiles.first(where: { $0.path.stem == "SIMD2+Double"} )
		else { throw CustomError.error(message: "Cannot find SIMD2+Double.swift")}

		let simd2InputDoubleURL = URL(filePath: simd2DoubleSourceFile.path.string)
		let simd2InputDoubleData = try Data(contentsOf: simd2InputDoubleURL)
		guard
			let simdInputDoubleString = String(data: simd2InputDoubleData, encoding: .utf8)
		else { throw CustomError.error(message: "Cannot stringify data") }

		// output
		// simd2 float
		let simd2FloatString = alterString(simdInputDoubleString, with: { $0.replacingOccurrences(of: "Double", with: "Float") })
		let simd2FloatURL = outputFileURL(from: simd2InputDoubleURL, renamed: "SIMD2+Float")
		try simd2FloatString.write(to: simd2FloatURL, atomically: true, encoding: .utf8)

		// simd3 float
		let simd3FloatString = alterString(simdInputDoubleString, with: {
			let new = $0.replacingOccurrences(of: "Double", with: "Float")
			return new.replacingOccurrences(of: "SIMD2", with: "SIMD3")
		})
		let simd3FloatURL = outputFileURL(from: simd2InputDoubleURL, renamed: "SIMD3+Float")
		try simd3FloatString.write(to: simd3FloatURL, atomically: true, encoding: .utf8)

		// simd3 double
		let simd3DoubleString = alterString(simdInputDoubleString, with: { $0.replacingOccurrences(of: "SIMD2", with: "SIMD3") })
		let simd3DoubleURL = outputFileURL(from: simd2InputDoubleURL, renamed: "SIMD3+Double")
		try simd3DoubleString.write(to: simd3DoubleURL, atomically: true, encoding: .utf8)
	}

	private func alterString(_ string: String, with block: (String) -> String) -> String {
		"""
		// AUTOGENERATED FILE!
		// EDITS WILL BE OVERWRITTEN
		// TO AMEND, MAKE CHANGES TO SIMD2+Double

		\(block(string))
		"""
	}

	private func outputFileURL(from original: URL, renamed name: String) -> URL {
		let ext = original.pathExtension
		return original
			.deletingLastPathComponent()
			.appending(component: name)
			.appendingPathExtension(ext)
	}
}

enum CustomError: Error {
	case error(message: String)
}
